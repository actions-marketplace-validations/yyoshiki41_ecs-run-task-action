name: "Run ECS task"
description: "GitHub Action to run a task on Amazon ECS and output CloudWatch Logs"
inputs:
  region:
    description: "AWS Region"
    required: false
    default: "ap-northeast-1"
  task-definition:
    required: true
    description: "The path to the task definition file"
  task-definition-family:
    description: "a name for your task definition"
    required: true
  launch-type:
    description: "Launch type"
    required: false
    default: "FARGATE"
  cluster:
    description: "ECS Cluster name"
    required: true
  subnets:
    description: "awsvpcConfiguration values: ['subnet-00', ...]"
    required: true
  security-groups:
    description: "awsvpcConfiguration values: ['sg-00', ...]"
    required: true
  assign-public-ip:
    description: "awsvpcConfiguration values"
    required: false
    default: "DISABLED"

outputs:
  revision:
    description: "Task definition's revision number"
    value: ${{ steps.task-def-register.outputs.revision }}

runs:
  using: "composite"
  steps:
    - name: Install AWS CLI form pip
      shell: bash
      run: pip install --upgrade pip awscli

    - name: Register ECS task definition
      shell: bash
      id: task-def-register
      run: |
        revision=$(aws ecs register-task-definition --region ${{ inputs.region }} --family ${{ inputs.task-definition-family }} --cli-input-json file://${{ inputs.task-definition }} --query taskDefinition.revision)
        echo "::set-output name=revision::$revision"

    - name: Run ECS task
      shell: bash
      id: run-task
      env:
        vpc_configuration: "{subnets=${{ inputs.subnets }},securityGroups=${{ inputs.security-groups }},assignPublicIp=${{ inputs.assign-public-ip }}}"
      run: |
        task_arn=$(aws ecs run-task --region ${{ inputs.region }} --launch-type ${{ inputs.launch-type }} --cluster ${{ inputs.cluster }} --network-configuration 'awsvpcConfiguration=${{ env.vpc_configuration }}' --task-definition ${{ inputs.task-definition-family }}:${{ steps.task-def-register.outputs.revision }} --query tasks[0].taskArn --output text)
        echo "::set-output name=task_arn::$task_arn"

    - name: Wait until a task stopped
      shell: bash
      run: |
        aws ecs wait tasks-stopped \
          --cluster ${{ inputs.cluster }} \
          --tasks ${{ steps.run-task.outputs.task_arn }}

    - name: Install ecs-cli
      shell: bash
      run: |
        sudo curl -Lo /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-v1.21.0
        sudo chmod +x /usr/local/bin/ecs-cli
    - name: Retrieve container logs from CloudWatch logs
      shell: bash
      id: logs
      run: |
        ecs-cli logs --timestamps \
          --cluster ${{ inputs.family }} \
          --task-id $(echo ${{ steps.run-task.outputs.task_arn }} | cut -d "/" -f 3) \
          --task-def ${{ inputs.task-definition-family }}:${{ steps.task-def-registration.outputs.revision }}
